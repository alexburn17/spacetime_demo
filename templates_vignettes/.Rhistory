import platform
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
from spacetime.operations.cubeToDataframe import cube_to_dataframe
library(tidyverse)
library(stringr)
library(raster)
months <- c(paste0("0",seq(1,9)),10,11,12)
years <- seq(1981,1995)
precip <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/pr/CHELSA_pr_",
rep(months,30),"_",rep(years,each = 12),"_V.2.1.tif"))
tmin <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmin/CHELSA_tasmin_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
tmax <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmax/CHELSA_tasmax_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
txt_file <- c(precip, tmin, tmax)
txt_file
# raster I use to define cropping extent
ref_extent <- raster("D:/Climate/CHELSA2/bio1_1981-2010_V.2.1.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
plot(ref_extent)
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
z
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
print(name)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
}
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
getOption('timeout')
options(timeout=100)
getOption('timeout')
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
options(timeout=100)
txt_file
install.packages("roxygen2")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
spacetime::do_a_thing(3)
library(spacetime)
spacetime::do_a_thing(3)
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
reticulate::import_from_path(module = "rasterAlign", system.file("python", "scale", package = "spacetime", mustWork = TRUE))
system.file("python", "scale", package = "spacetime", mustWork = TRUE)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
os.path.dirname(os.path.abspath(__file__)))
os.path.dirname(os.path.abspath(fileObject.py)))
os.path.dirname(os.path.abspath(fileObject.py))
import os
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
spacetime::install_python_environment()
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
os.getcwdb()
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
outPut <- spacetime::read_data(dataPaths)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
library(spacetime)
library(spacetime)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
library(spacetime)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
library(spacetime)
spacetime::do_a_thing(3)
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
