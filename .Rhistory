lm(data = less, value~synCo)
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
lMod$coefficients
lMod$coefficients[2]
outMat <- matrix(, nrow = len(A_probs)*len(B_probs), ncol = 4)
outMat <- matrix(, nrow = length*length(B_probs), ncol = 4)
outMat <- matrix(, nrow = length(A_probs)*length(B_probs), ncol = 4)
outMat
counter <- 1
population = 100
counter <- 1
A_probs <- seq(0, 1, .05)
B_probs <- seq(0, 1, .05)
outMat <- matrix(, nrow = length(A_probs)*length(B_probs), ncol = 4)
for(i in length(A_probs)){
for(j in length(B_probs)){
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
counter <- counter + 1
}
}
outMat
for(i in length(A_probs)){
for(j in length(B_probs)){
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
counter <- counter + 1
print(counter)
}
}
for(i in length(A_probs)){
for(j in length(B_probs)){
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
counter <- counter + 1
print(i)
}
}
outMat
for(i in length(A_probs)){
for(j in length(B_probs)){
counter<- counter + 1
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
}
}
outMat
for(i in length(A_probs)){
for(j in length(B_probs)){
counter<- counter + 1
counter
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
}
}
for(i in length(A_probs)){
for(j in length(B_probs)){
counter<- counter + 1
print(counter)
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
}
}
outMat
for(i in length(A_probs)){
for(j in length(B_probs)){
print("x")
}
}
length(A_probs)
counter <- 1
A_probs <- seq(0, 1, .05)
B_probs <- seq(0, 1, .05)
outMat <- matrix(, nrow = length(A_probs)*length(B_probs), ncol = 4)
for(i in 1:length(A_probs)){
for(j in 1:length(B_probs)){
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
counter <- counter + 1
}
}
outMat
dfPlot <- data.frame(outMat)
dfPlot
ggplot(data = dfPlot, aes(X1, X2, fill= X3)) +
geom_tile()
ggplot(data = dfPlot, aes(X1, X2, fill= X3)) +
geom_tile() +
scale_fill_viridis_b()
ggplot(data = dfPlot, aes(X1, X2, fill= X3)) +
geom_tile() +
scale_fill_viridis()
ggplot(data = dfPlot, aes(X1, X2, fill= X3)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X4)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X4/X3)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X3/X4)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X4)) +
geom_tile() +
scale_fill_viridis_c()
population = 10000
counter <- 1
A_probs <- seq(0, 1, .05)
B_probs <- seq(0, 1, .05)
outMat <- matrix(, nrow = length(A_probs)*length(B_probs), ncol = 4)
for(i in 1:length(A_probs)){
for(j in 1:length(B_probs)){
# fun the model
df <- synSim(A_prob = A_probs[i], B_prob = B_probs[j], N = population)
# select only coinfections
coinf <- df[df$variable=="Coinfections",]
# split above and below alpha = 0
greater <- coinf[coinf$synCo > 0,]
less <- coinf[coinf$synCo < 0,]
# fun linear mods
lMod <- lm(data = less, value~synCo)
gMod <- lm(data = greater, value~synCo)
# store slopes
outMat[counter, 1] <- A_probs[i]
outMat[counter, 2] <- A_probs[j]
outMat[counter, 3] <- lMod$coefficients[2]
outMat[counter, 4] <- gMod$coefficients[2]
counter <- counter + 1
}
}
dfPlot <- data.frame(outMat)
ggplot(data = dfPlot, aes(X1, X2, fill= X4)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X3)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(X1, X2, fill= X4)) +
geom_tile() +
scale_fill_viridis_c()
names(dfPlot)
names(dfPlot) <- c("P(A)", "P(B)", "lowerSlope", "greaterSlope")
names(dfPlot) <- c("P(A)", "P(B)", "lowerSlope", "greaterSlope")
dfPlot
ggplot(data = dfPlot, aes(P(A), P(B), fill= lowerSlope)) +
geom_tile() +
scale_fill_viridis_c()
names(dfPlot) <- c("P_A", "P_B", "lowerSlope", "greaterSlope")
ggplot(data = dfPlot, aes(P_A, P_B, fill= lowerSlope)) +
geom_tile() +
scale_fill_viridis_c()
ggplot(data = dfPlot, aes(P_A, P_B, fill= lowerSlope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17)
ggplot(data = dfPlot, aes(P_A, P_B, fill= lowerSlope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope",title = expression(alpha < 0))
A <- ggplot(data = dfPlot, aes(P_A, P_B, fill= lowerSlope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope",title = expression(alpha < 0))
A
dfPlot
dfPlot
dfPlot <- data.frame(outMat)
dfPlot
select(dfPlot, X1, X2, X3)
df <- rbind(a,b)
a <- select(dfPlot, X1, X2, X3)
b <- select(dfPlot, X1, X2, X4)
df <- rbind(a,b)
A
a
outMat[-4,]
outMat[,!4]
outMat[,c(1,2,3)]
a <- outMat[,c(1,2,3)]
b <- outMat[,c(1,2,4)]
matPlot <- rbind(a,b)
dfPlot <- data.frame(rbind(a,b))
names(dfPlot) <- c("P_A", "P_B", "Slope")
dfPlot
length(dfPlot$P_A)/2
dfPlot$regiem <- c(rep("lower", length(dfPlot$P_A)/2), rep("greater", length(dfPlot$P_A)/2))
dfPlot
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_grid(regiem ~ .)
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ .)
# New facet label names for supp variable
reg.labs <- c("Orange Juice", "Vitamin C")
names(reg.labs) <- c("OJ", "VC")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("P_A", "P_B")
names(reg.labs) <- c("OJ", "VC")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("P_A", "P_B")
names(reg.labs) <- c("P_A", "P_B")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = label_parsed)
# New facet label names for supp variable
reg.labs <- c("greater", "lower")
names(reg.labs) <- c("P_A", "P_B")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("greater", "lower")
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("greater", "lower")
names(reg.labs) <- c("g", "l")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("g", "l")
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") + # title = expression(alpha < 0)
facet_wrap(regiem ~ .)  #labeller = labeller(regiem = reg.labs)
# New facet label names for supp variable
reg.labs <- c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
reg.labs
expression(alpha < 0)
# New facet label names for supp variable
reg.labs <- c(paste0(expression(alpha > 0)), paste0(expression(alpha < 0)))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c(expression(alpha > 0), expression(alpha < 0))
# New facet label names for supp variable
reg.labs <- c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = paste0(reg.labs)))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("a", "b")    #c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c("\u03b1", "\u03b1")    #c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c(paste0("\u03b1", >, ) ), "\u03b1")    #c(expression(alpha > 0), expression(alpha < 0))
# New facet label names for supp variable
reg.labs <- c(paste0("\u03b1", ">", "0"), "\u03b1")    #c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c(paste0("\u03b1", " > ", "0"), "\u03b1")    #c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
# New facet label names for supp variable
reg.labs <- c(paste0("\u03b1", " > ", "0"), paste0("\u03b1", " < ", "0"))    #c(expression(alpha > 0), expression(alpha < 0))
names(reg.labs) <- c("greater", "lower")
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal(base_size = 17) +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17) +
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17)
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17)
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17) +
theme(strip.text = element_text(size=17))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17) +
theme(strip.text = element_text(size=19))
ggplot(data = dfPlot, aes(P_A, P_B, fill= Slope)) +
geom_tile() +
scale_fill_viridis_c() +
labs(y = "Prevalence of B", x = "Prevalence of A", fill="Slope") +
facet_wrap(regiem ~ ., labeller = labeller(regiem = reg.labs)) +
theme_minimal(base_size = 17) +
theme(strip.text = element_text(size=19))
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "myCondaEnvironment", conda = "auto", required = FALSE)
reticulate::repl_python()
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "myCondaEnvironment", conda = "auto", required = FALSE)
reticulate::repl_python()
