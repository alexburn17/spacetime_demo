tosi_lethal[tosi_lethal == " "] <- NA
tosi_lethal[tosi_lethal == ""] <- NA
# changing column names
colnames(tosi_lethal) # original column names
tosi_lethal_colnames <- c("pesticide_name", "other_names","cas", "pesticide_type", "MoA_short", "MoA_classification_site_target", "oral_LD50_geometricmean_ugbee", "oral_source_num","oral_LD50_min", "oralQ1", "oralQ2_median", "oralQ3", "oral_LD50_max", "oral_range", "oral_source_name", "oral_LD50_1", "oral_LD50_2", "oral_LD50_3", "oral_LD50_4", "oral_LD50_5", "contact_LD50_geometricmean_ugbee","contact_source_num","contact_LD50_min", "contactQ1", "contactQ2_median", "contactQ3", "contact_LD50_max","contact_range", "contact_source_name", "contact_LD50_1", "contact_LD50_2","contact_LD50_3")
colnames(tosi_lethal) <- tosi_lethal_colnames
# finding minLD50 value - all units are ug/bee
# NOTE: Transform to PPB
tl <- tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(oral_LD50_min, oral_LD50_1, oral_LD50_2, oral_LD50_3, oral_LD50_4, oral_LD50_5, contact_LD50_min, contact_LD50_1, contact_LD50_2, contact_LD50_3, na.rm = TRUE))
# remove Inf values
tl$min_LD50_value <- ifelse(tl$min_LD50_value == "Inf", NA, tl$min_LD50_value)
# remove rows with NA for LD50
tosi_lethal_noNA <- tl[!is.na(tl$min_LD50_value), ]
# summarize for each chemical
TL_simplified <- tosi_lethal_noNA %>%
group_by(pesticide_name) %>% # pick variables to group by
summarise(
min_LD50_value = min(min_LD50_value, na.rm=T),
)
colnames(tosi_sublethal)
tosi_sublethal_colnames <- c("pesticide_name", "cas", "pesticide_type", "MoA_short", "MoA_classification_site_taret", "survey_inclusion_name", "screened_in_survey", "num_survery_screenings", "oral_LD50_geometricmean_ugbee", "oral_source_name", "contact_LD50_geometricmean_ugbee", "contact_source_name", "LOAEL_allunits", "LOAEL_unit_measure", "LOAEL_ug/bee/day", "LOAEL_category_ug/bee", "SubTR_LOAEL/LD50", "SubTR_category", "exposure_type_oral_v_contact", "exposure_type_acute_v_chronic", "exposure_duration_h", "time_after_exposure_of_significant_effect_h", "feedtype_main_category", "feedtype_subcategory", "feedtype_concentration", "bee_type", "bee_genus", "bee_species", "bee_species_details", "sublethal_effect_main_category", "sublethal_effect_subcategory", "sublethal_effect_details", "original_ref", "ref_year", "review_ref")
colnames(tosi_sublethal) <- tosi_sublethal_colnames
tosi_sublethal[tosi_sublethal == " "] <- NA
tosi_sublethal[tosi_sublethal == ""] <- NA
tosi_sublethal$LOAEL_unit_measure <- as.character(tosi_sublethal$LOAEL_unit_measure)
str(tosi_sublethal$LOAEL_unit_measure)
which(table(tosi_sublethal$LOAEL_unit_measure)>=1)
# could unit measures be put into a function for conversion to ppb?
tosi_sublethal_unit_measures <- c("µg/bee", "µM", "g/bee/week", "g/ha", "g/hive", "g/hm-2", "gals/acre", "μg", "μg/bee",
"μg/bee/day", "μg/larva", "μL", "μL/bee", "μM", "kg/ha", "MFR", "mL/bee", "mL/colony",
"mM", "mm3 /bee", "ng/L", "ng/ml", "nM", "nmol/bee", "nmol/day/bee", "ppb", "ppm", "unclear")
tosi_sublethal$LOAEL_ug_per_bee <- tosi_sublethal$`LOAEL_ug/bee/day`
# remove rows with NA for LOAEL
tosi_sublethal_noNA <- tosi_sublethal[!is.na(tosi_sublethal$LOAEL_ug_per_bee), ]
# make variable of bee genus simplified
tosi_sublethal_noNA$bee_genus_simple <- ifelse(tosi_sublethal_noNA$bee_genus == "Apis", "Honeybee", ifelse(
tosi_sublethal_noNA$bee_genus == "Bombus", "Bumblebee", "Other")
)
# TO DO: convert to PPB
# LOAEL: Lowest Observed Adverse effect level
# N studies found sublethal impacts of this chemical on beeGenera. The lowest concentration accross studies is X
# summarize for each chemical - min value fro LOAEL - block by bee type and sum number of pubs
TS_simplified <- tosi_sublethal_noNA %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(pesticide_name, bee_genus_simple) %>% # pick variables to group by
summarise(
min_LOAEL_ug_per_bee = min(LOAEL_ug_per_bee, na.rm=T), # mean
numPubs = length(original_ref),
)
################################################
# Cleaning Pest_Desc Dataset (NHBS descriptions)
################################################
# pest_Desc
# changing column names
colnames(pest_Desc) # original column names
pest_Desc_colnames <- c("pesticide_name", "description", "pesticide_type")
colnames(pest_Desc) <- pest_Desc_colnames
# eliminating rows with redundant values from transition to csv
pest_Desc <- subset(pest_Desc, pest_Desc$pesticide_name != "Pesticide")
pest_Desc_updated[pest_Desc_updated == " "] <- NA
pest_Desc_updated[pest_Desc_updated == ""] <- NA
## 1st description dataset merge
# Merging pest_Desc_additionalinfo to pest_Desc, creating pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc, x = pest_Desc_additionalinfo, by = "pesticide_name", all = TRUE)
##2nd description dataset merge
# Merging pest_Desc_updated into pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc_combined, x = pest_Desc_updated , by = "pesticide_name", all = TRUE)
# Merging Tosi Datasets
tosi_combined <- merge(TL_simplified, TS_simplified, by = "pesticide_name", all = TRUE)
# Merging Tosi combined dataset with the combined pesticide description dataset
tosiDesc_combined <- merge(tosi_combined, pest_Desc_combined, by = "pesticide_name", all = TRUE)
# removing unwanted columns
tosiDesc_combined <- tosiDesc_combined %>%
select(-description.x, -description.y, -pesticide_type.y)
pest_DescResults_combined <- merge(tosiDesc_combined, pest_df_long, by = "pesticide_name", all = TRUE)
pest_DescResults_combined
View(pest_DescResults_combined)
tosi_combined
library(tidyverse)
library(dplyr)
library(ggplot2)
library(reshape2)
setwd("/Users/pburnham/Documents/GitHub/alex_beelab_private/pesticides")
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("data/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# Read in Tosi Datasets
tosi_lethal <- read.csv("data/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE, skip = 1)
tosi_sublethal <- read.csv("data/Tosi_sublethal.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Description Dataset (NHBS descriptions)
pest_Desc <- read.csv("data/pestDesc.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in additional description information (classification info in Google Sheet from Colin)
pest_Desc_additionalinfo <- read.csv("data/pestDesc_additioninfo.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in updated description information - Colin
pest_Desc_updated <- read.csv("data/updated_descriptions_4-1-23.csv")
View(pest_Results)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
#######################################################
# LIMIT FINDER FUNCTION
#######################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
#getting rid of column "X'
pest_df$X <- NULL
View(pest_df)
View(tosi_sublethal)
pest_DescResults_combined
# Cornell Results to long form
pest_df_long <- melt(pest_df,
id.vars = c("File.Name", "Client.ID1", "Client.ID2", "Mass..g.", "scale"))
# changing column names
colnames(pest_df_long) # original column names
pest_df_long_colnames <- c("file_name", "client_ID1", "client_ID2", "mass_g", "scale", "pesticide_name", "value")
colnames(pest_df_long) <- pest_df_long_colnames
# convert blank spaces to NA
tosi_lethal[tosi_lethal == " "] <- NA
tosi_lethal[tosi_lethal == ""] <- NA
# changing column names
colnames(tosi_lethal) # original column names
tosi_lethal_colnames <- c("pesticide_name", "other_names","cas", "pesticide_type", "MoA_short", "MoA_classification_site_target", "oral_LD50_geometricmean_ugbee", "oral_source_num","oral_LD50_min", "oralQ1", "oralQ2_median", "oralQ3", "oral_LD50_max", "oral_range", "oral_source_name", "oral_LD50_1", "oral_LD50_2", "oral_LD50_3", "oral_LD50_4", "oral_LD50_5", "contact_LD50_geometricmean_ugbee","contact_source_num","contact_LD50_min", "contactQ1", "contactQ2_median", "contactQ3", "contact_LD50_max","contact_range", "contact_source_name", "contact_LD50_1", "contact_LD50_2","contact_LD50_3")
colnames(tosi_lethal) <- tosi_lethal_colnames
# finding minLD50 value - all units are ug/bee
# NOTE: Transform to PPB
tl <- tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(oral_LD50_min, oral_LD50_1, oral_LD50_2, oral_LD50_3, oral_LD50_4, oral_LD50_5, contact_LD50_min, contact_LD50_1, contact_LD50_2, contact_LD50_3, na.rm = TRUE))
# remove Inf values
tl$min_LD50_value <- ifelse(tl$min_LD50_value == "Inf", NA, tl$min_LD50_value)
# remove rows with NA for LD50
tosi_lethal_noNA <- tl[!is.na(tl$min_LD50_value), ]
# summarize for each chemical
TL_simplified <- tosi_lethal_noNA %>%
group_by(pesticide_name) %>% # pick variables to group by
summarise(
min_LD50_value = min(min_LD50_value, na.rm=T),
)
colnames(tosi_sublethal)
tosi_sublethal_colnames <- c("pesticide_name", "cas", "pesticide_type", "MoA_short", "MoA_classification_site_taret", "survey_inclusion_name", "screened_in_survey", "num_survery_screenings", "oral_LD50_geometricmean_ugbee", "oral_source_name", "contact_LD50_geometricmean_ugbee", "contact_source_name", "LOAEL_allunits", "LOAEL_unit_measure", "LOAEL_ug/bee/day", "LOAEL_category_ug/bee", "SubTR_LOAEL/LD50", "SubTR_category", "exposure_type_oral_v_contact", "exposure_type_acute_v_chronic", "exposure_duration_h", "time_after_exposure_of_significant_effect_h", "feedtype_main_category", "feedtype_subcategory", "feedtype_concentration", "bee_type", "bee_genus", "bee_species", "bee_species_details", "sublethal_effect_main_category", "sublethal_effect_subcategory", "sublethal_effect_details", "original_ref", "ref_year", "review_ref")
colnames(tosi_sublethal) <- tosi_sublethal_colnames
tosi_sublethal[tosi_sublethal == " "] <- NA
tosi_sublethal[tosi_sublethal == ""] <- NA
tosi_sublethal$LOAEL_unit_measure <- as.character(tosi_sublethal$LOAEL_unit_measure)
str(tosi_sublethal$LOAEL_unit_measure)
which(table(tosi_sublethal$LOAEL_unit_measure)>=1)
# could unit measures be put into a function for conversion to ppb?
tosi_sublethal_unit_measures <- c("µg/bee", "µM", "g/bee/week", "g/ha", "g/hive", "g/hm-2", "gals/acre", "μg", "μg/bee",
"μg/bee/day", "μg/larva", "μL", "μL/bee", "μM", "kg/ha", "MFR", "mL/bee", "mL/colony",
"mM", "mm3 /bee", "ng/L", "ng/ml", "nM", "nmol/bee", "nmol/day/bee", "ppb", "ppm", "unclear")
tosi_sublethal$LOAEL_ug_per_bee <- tosi_sublethal$`LOAEL_ug/bee/day`
# remove rows with NA for LOAEL
tosi_sublethal_noNA <- tosi_sublethal[!is.na(tosi_sublethal$LOAEL_ug_per_bee), ]
# make variable of bee genus simplified
tosi_sublethal_noNA$bee_genus_simple <- ifelse(tosi_sublethal_noNA$bee_genus == "Apis", "Honeybee", ifelse(
tosi_sublethal_noNA$bee_genus == "Bombus", "Bumblebee", "Other")
)
# TO DO: convert to PPB
# LOAEL: Lowest Observed Adverse effect level
# N studies found sublethal impacts of this chemical on beeGenera. The lowest concentration accross studies is X
# summarize for each chemical - min value fro LOAEL - block by bee type and sum number of pubs
TS_simplified <- tosi_sublethal_noNA %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(pesticide_name, bee_genus_simple) %>% # pick variables to group by
summarise(
min_LOAEL_ug_per_bee = min(LOAEL_ug_per_bee, na.rm=T), # mean
numPubs = length(original_ref),
)
################################################
# Cleaning Pest_Desc Dataset (NHBS descriptions)
################################################
# pest_Desc
# changing column names
colnames(pest_Desc) # original column names
pest_Desc_colnames <- c("pesticide_name", "description", "pesticide_type")
colnames(pest_Desc) <- pest_Desc_colnames
# eliminating rows with redundant values from transition to csv
pest_Desc <- subset(pest_Desc, pest_Desc$pesticide_name != "Pesticide")
pest_Desc_updated[pest_Desc_updated == " "] <- NA
pest_Desc_updated[pest_Desc_updated == ""] <- NA
## 1st description dataset merge
# Merging pest_Desc_additionalinfo to pest_Desc, creating pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc, x = pest_Desc_additionalinfo, by = "pesticide_name", all = TRUE)
##2nd description dataset merge
# Merging pest_Desc_updated into pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc_combined, x = pest_Desc_updated , by = "pesticide_name", all = TRUE)
# Merging Tosi Datasets
tosi_combined <- merge(TL_simplified, TS_simplified, by = "pesticide_name", all = TRUE)
# Merging Tosi combined dataset with the combined pesticide description dataset
tosiDesc_combined <- merge(tosi_combined, pest_Desc_combined, by = "pesticide_name", all = TRUE)
# removing unwanted columns
tosiDesc_combined <- tosiDesc_combined %>%
select(-description.x, -description.y, -pesticide_type.y)
pest_DescResults_combined <- merge(tosiDesc_combined, pest_df_long, by = "pesticide_name", all = TRUE)
View(pest_DescResults_combined)
# make table for 2021 and 2022 neonic data
######################################################################
str(pest_df)
# make table for 2021 and 2022 neonic data
######################################################################
col.names(pest_df)
# make table for 2021 and 2022 neonic data
######################################################################
names(pest_df)
# select wanted columns
select(pest_df, File.Name, Client.ID1, Client.ID2, Mass..g.)
# select wanted columns
select(pest_df, File.Name, Client.ID1, Client.ID2, Mass..g., Thiamethoxam, Clothianidin, Imidacloprid, Acetamiprid)
# select wanted columns
select(pest_df, File.Name, Client.ID1, Client.ID2, Mass..g., Thiamethoxam, Clothianidin, Imidacloprid, Acetamiprid, Thiacloprid)
pest_Results <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Results
pest_Results2022 <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Results2022
View(pest_Results)
View(pest_Results2022)
pest_Results2022 <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 2)
View(pest_Results2022)
pest_Results <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 2)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
LS_df
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
SS_filename_row
View(pest_Results2022)
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
LS_row
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
SS_filename_row
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
<- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
bottom_row
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("data/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
View(pest_Results)
pest_Results <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 2)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
bottom_row
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
LS_lookup
LS_df
View(LS_df)
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("data/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Results2022 <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 2)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA # 2021
pest_Results2022[pest_Results2022 == "n.d."] <- NA # 2022
-
-
# find our cut points 2022
LS_row <- which(pest_Results2022 == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results2022 == "Small Scale", arr.ind=TRUE)[1]
# find our cut points 2022
LS_row <- which(pest_Results2022 == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results2022 == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results2022 == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results2022 == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
LS_row
SS_row
SS_filename_row <- which(pest_Results2022 == "File Name", arr.ind=TRUE)[1]
SS_filename_row
# find our cut points 2022
LS_row2022 <- which(pest_Results2022 == "Large Scale", arr.ind=TRUE)[1]
bottom_row2022 <- which(pest_Results2022 == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# find our cut points 2021
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
SS_filename_row
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),] # 2021
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),] # 2021
LS_df2022 <- pest_Results2022[1:(LS_row2022-1),] # 2022
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),] # 2021
SS_lookup <- pest_Results[SS_row:(SS_row+3),] # 2021
LS_lookup2022 <- pest_Results2022[LS_row2022:(LS_row2022+3),] # 2022
LS_lookup2022
SS_lookup
LS_df2022
View(LS_df2022)
#######################################################
# LIMIT FINDER FUNCTION
#######################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
######################################################################
# set up 2022 dataset
######################################################################
LS_df2022 <- limit_finder(df = LS_df2022, search = "<LOQ", lookup = LS_lookup2022)
LS_df2022 <- limit_finder(df = LS_df2022, search = ">ULOQ", lookup = LS_lookup2022)
LS_df2022
View(LS_df2022)
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("data/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Results2022 <- read.csv("data/pesticide_results_2022.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 2)
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA # 2021
pest_Results2022[pest_Results2022 == "n.d."] <- NA # 2022
# find our cut points 2021
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# find our cut points 2022
LS_row2022 <- which(pest_Results2022 == "Large Scale", arr.ind=TRUE)[1]
bottom_row2022 <- which(pest_Results2022 == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),] # 2021
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),] # 2021
LS_df2022 <- pest_Results2022[1:(LS_row2022-1),] # 2022
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),] # 2021
SS_lookup <- pest_Results[SS_row:(SS_row+3),] # 2021
LS_lookup2022 <- pest_Results2022[LS_row2022:(LS_row2022+3),] # 2022
#######################################################
# LIMIT FINDER FUNCTION
#######################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
######################################################################
# set up 2021 dataset
######################################################################
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
#getting rid of column "X'
pest_df$X <- NULL
######################################################################
# set up 2022 dataset
######################################################################
LS_df2022 <- limit_finder(df = LS_df2022, search = "<LOQ", lookup = LS_lookup2022)
pest_df2022 <- limit_finder(df = LS_df2022, search = ">ULOQ", lookup = LS_lookup2022)
# select wanted columns
neonic2021 <- select(pest_df, File.Name, Client.ID1, Client.ID2, Mass..g., Thiamethoxam, Clothianidin, Imidacloprid, Acetamiprid, Thiacloprid, Sulfoxaflor)
View(pest_df2022\)
View(pest_df2022)
View(pest_df)
neonic2022
neonic2022 <- select(pest_df2022, File.Name, Client.ID1, Client.ID2, Mass..g., Thiamethoxam, Clothianidin, Imidacloprid, Acetamiprid, Thiacloprid, Sulfoxaflor)
names(pest_df2022)
neonic2022 <- select(pest_df2022, File.Name, Notebook.ID, Sample.ID.1, Sample.ID.2, Mass..g., Thiamethoxam, Clothianidin, Imidacloprid, Acetamiprid, Thiacloprid, Sulfoxaflor)
View(neonic2022)
View(neonic2021)
write.csv(neonic2021, "neonic2021.csv")
write.csv(neonic2021, "neonic2022.csv")
write.csv(neonic2022, "neonic2022.csv")
neonic2122 <- read.csv("neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
neonic2122
sample_inventory <- read.csv("pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
View(sample_inventory)
merge(neonic2122, sample_inventory)
x <-merge(neonic2122, sample_inventory)
View(x)
View(neonic2122)
# read in complete dataset we just made and merge with sample inventory
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
x <-merge(neonic2122, sample_inventory)
View(x)
x <-merge(x=neonic2122, y=sample_inventory, all.x = TRUE)
View(x)
str(neonic2122)
x <-merge(x=neonic2122, y=sample_inventory, by.x = "Client.ID1", all.x = TRUE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = "Client.ID1", all.x = FALSE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = "Client.ID1", all.y = TRUE)
View(x)
x <-merge(x=neonic2122, y=sample_inventory, by.x = "Client.ID1", all.x = TRUE, all.y=FALSE)
View(x)
######################################################################
table(x$Client.ID1)
# read in complete dataset we just made and merge with sample inventory
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = c("Client.ID1", "sample_type"), all.x = TRUE, all.y=FALSE)
View(x)
# read in complete dataset we just made and merge with sample inventory
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = c("Client.ID1", "sample_type"), all.x = TRUE, all.y=FALSE)
View(x)
neonic2021
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("data/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
pest_Results
# read in complete dataset we just made and merge with sample inventory
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = c("Client.ID1", "sample_type"), all.x = TRUE, all.y=FALSE)
View(x)
# read in complete dataset we just made and merge with sample inventory
neonic2122 <- read.csv("data/neonic_2021_2022.csv", header = TRUE, stringsAsFactors = FALSE)
sample_inventory <- read.csv("data/pollen_sample_inventory.csv", header = TRUE, stringsAsFactors = FALSE)
x <-merge(x=neonic2122, y=sample_inventory, by.x = c("Client.ID1", "sample_type"), all.x = TRUE, all.y=FALSE)
View(x)
write.csv(x, "neonic_2122_meta_merged")
write.csv(x, "neonic_2122_meta_merged.csv")
#load the reticulate package
library(reticulate)
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "~/anaconda3/envs/barra_python/bin/python/", required = TRUE)
reticulate::repl_python()
